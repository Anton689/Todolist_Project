{"version":3,"sources":["serviceWorker.ts","api/todolists-api.ts","features/Login/auth-reducer.ts","app/app-reducer.ts","utils/error-utils.ts","features/TodolistsList/todolists-reducer.ts","features/TodolistsList/tasks-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","features/Login/Login.tsx","app/App.tsx","app/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","id","delete","put","todolistId","taskId","taskTitile","model","authAPI","data","loginTC","createAsyncThunk","thunkAPI","a","dispatch","setAppStatusAC","status","res","resultCode","value","handleServerAppError","rejectWithValue","handleServerNetworkError","slice","createSlice","name","initialState","isLoggedIn","reducers","setIsLoggedInAC","state","action","payload","extraReducers","builder","addCase","fulfilled","authReducer","reducer","actions","error","isInitialized","setAppErrorAC","setAppInitializedAC","appReducer","messages","length","message","removeTodolistAC","index","findIndex","tl","splice","addTodolistAC","unshift","todolist","filter","entityStatus","changeTodolistTitleAC","changeTodolistFilterAC","changeTodolistEntityStatusAC","setTodolistsAC","todolists","map","todolistsReducer","fetchTasksTC","tasks","items","removeTaskTC","param","then","addTaskAC","task","todoListId","updateTaskAC","t","forEach","tasksReducer","updateTaskTC","domainModel","getState","find","apiModel","deadline","description","priority","startDate","catch","console","warn","AddItemForm","React","memo","addItem","disabled","log","useState","setTitle","setError","addItemHandler","trim","TextField","variant","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","props","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","onClickHandler","useCallback","removeTask","onChangeHandler","newIsDoneValue","checked","changeTaskStatus","Completed","New","onTitleChangeHandler","newValue","changeTaskTitle","key","className","Checkbox","Delete","Todolist","demo","useDispatch","useEffect","thunk","addTask","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","removeTodolist","style","paddingTop","Button","TodolistsList","useSelector","auth","item","addTaskTC","changeStatus","newTitle","changeTodolistTitleTC","addTodolist","addTodolistTC","Grid","container","padding","spacing","allTodolistTasks","Paper","to","Alert","elevation","ErrorSnackbar","app","handleClose","event","reason","isOpen","Snackbar","open","autoHideDuration","onClose","severity","Login","formik","useFormik","validate","values","email","password","initialValues","rememberMe","onSubmit","justify","xs","handleSubmit","FormControl","FormLabel","href","target","FormGroup","margin","getFieldProps","errors","type","FormControlLabel","control","App","logoutHandler","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","LinearProgress","Container","fixed","exact","path","render","top","textAlign","width","CircularProgress","rootReducer","combineReducers","store","configureStore","middleware","getDefaultMiddleware","prepend","thunkMiddleware","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.afb0352d.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios from 'axios'\r\n\r\nconst settings = {\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'ace90cee-0ad1-4fe7-b431-a630cfb3f541'\r\n    }\r\n}\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    ...settings\r\n})\r\n\r\n// api\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        const promise = instance.get<TodolistType[]>('todo-lists');\r\n        return promise;\r\n    },\r\n    createTodolist(title: string) {\r\n        const promise = instance.post<ResponseType<{ item: TodolistType }>>('todo-lists', {title: title});\r\n        return promise;\r\n    },\r\n    deleteTodolist(id: string) {\r\n        const promise = instance.delete<ResponseType>(`todo-lists/${id}`);\r\n        return promise;\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        const promise = instance.put<ResponseType>(`todo-lists/${id}`, {title: title});\r\n        return promise;\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, taskTitile: string) {\r\n        return instance.post<ResponseType<{ item: TaskType}>>(`todo-lists/${todolistId}/tasks`, {title: taskTitile});\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<ResponseType<TaskType>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n}\r\n\r\n\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha?: string\r\n}\r\n\r\nexport const authAPI = {\r\n    login(data: LoginParamsType) {\r\n        const promise = instance.post<ResponseType<{userId?: number}>>('auth/login', data);\r\n        return promise;\r\n    },\r\n    logout() {\r\n        const promise = instance.delete<ResponseType<{userId?: number}>>('auth/login');\r\n        return promise;\r\n    },\r\n    me() {\r\n       const promise =  instance.get<ResponseType<{id: number; email: string; login: string}>>('auth/me');\r\n       return promise\r\n    }\r\n}\r\n\r\n// types\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: D\r\n}\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n","import {Dispatch} from 'redux'\r\nimport {setAppStatusAC} from '../../app/app-reducer'\r\nimport {authAPI, LoginParamsType} from '../../api/todolists-api'\r\nimport {handleServerAppError, handleServerNetworkError} from '../../utils/error-utils'\r\nimport {createAsyncThunk, createSlice, PayloadAction} from '@reduxjs/toolkit';\r\nimport {action} from '@storybook/addon-actions';\r\n\r\ntype PayloadType = {\r\n    value: boolean\r\n}\r\n\r\nconst initialState = {\r\n    isLoggedIn: false\r\n}\r\n\r\nexport const loginTC = createAsyncThunk('auth/loginTC', async (data: LoginParamsType, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatusAC({status: 'loading'}))\r\n    try {\r\n        const res = await authAPI.login(data);\r\n        if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            return {value: true}\r\n        } else {\r\n            handleServerAppError(res.data, thunkAPI.dispatch)\r\n            return thunkAPI.rejectWithValue({value: false})\r\n        }\r\n    } catch (error: any) {\r\n        handleServerNetworkError(error, thunkAPI.dispatch)\r\n        return thunkAPI.rejectWithValue({value: false})\r\n    }\r\n\r\n})\r\n\r\n\r\nconst slice = createSlice({\r\n    name: 'auth',\r\n    initialState: initialState,\r\n    reducers: {\r\n        setIsLoggedInAC(state, action: PayloadAction<Pick<PayloadType, 'value'>>) {\r\n            state.isLoggedIn = action.payload.value;\r\n        },\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder.addCase(loginTC.fulfilled, (state, action) => {\r\n            state.isLoggedIn = action.payload.value;\r\n\r\n        })\r\n    }\r\n})\r\n\r\nexport const authReducer = slice.reducer\r\nexport const {setIsLoggedInAC} = slice.actions\r\n\r\n\r\n// thunks\r\n\r\nexport const logoutTC = () => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    authAPI.logout()\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC({value: true}))\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\n","import {Dispatch} from 'redux'\r\nimport {authAPI} from '../api/todolists-api'\r\nimport {setIsLoggedInAC} from '../features/Login/auth-reducer'\r\nimport {createSlice, PayloadAction} from '@reduxjs/toolkit';\r\nimport {isBoolean} from 'util';\r\n\r\n\r\n//types\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\nexport type InitialStateType = {\r\n    // взаимодействие с сервером\r\n    status: RequestStatusType\r\n    // ошибка  - мы запишем текст ошибки\r\n    error: string | null\r\n    isInitialized: boolean\r\n}\r\n\r\ntype PayloadType = {\r\n    error: string | null\r\n    value: boolean\r\n    status: RequestStatusType\r\n}\r\n\r\nconst initialState: InitialStateType = {\r\n    status: 'idle',\r\n    error: null,\r\n    isInitialized: false\r\n}\r\n\r\n// slice\r\nconst slice = createSlice({\r\n    name: 'app',\r\n    initialState: initialState,\r\n    reducers: {\r\n        setAppErrorAC(state, action: PayloadAction<Pick<PayloadType, 'error'>>) {\r\n            state.error = action.payload.error\r\n        },\r\n        setAppStatusAC(state, action: PayloadAction<Pick<PayloadType, 'status'>>) {\r\n            state.status = action.payload.status\r\n        },\r\n        setAppInitializedAC(state, action: PayloadAction<Pick<PayloadType, 'value'>>) {\r\n            state.isInitialized = action.payload.value\r\n        }\r\n    }\r\n})\r\n\r\nexport const  {setAppErrorAC, setAppStatusAC, setAppInitializedAC} = slice.actions\r\nexport const appReducer = slice.reducer\r\n\r\nexport const initializeAppTC = () => (dispatch: Dispatch) => {\r\n    authAPI.me().then(res => {\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setIsLoggedInAC({value: true}));\r\n        } else {\r\n\r\n        }\r\n\r\n        dispatch(setAppInitializedAC({value: true}));\r\n    })\r\n}\r\n\r\n","import {ResponseType} from '../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {setAppErrorAC, setAppStatusAC} from '../app/app-reducer';\r\n\r\nexport const handleServerAppError = <D>(data: ResponseType<D>, dispatch: Dispatch) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC({error: data.messages[0]}))\r\n    } else {\r\n        dispatch(setAppErrorAC({error: 'Some error occurred'}))\r\n    }\r\n    dispatch(setAppStatusAC({status: 'failed'}))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: { message: string }, dispatch: Dispatch) => {\r\n    dispatch(setAppErrorAC({error: error.message ? error.message : 'Some error occurred'}))\r\n    dispatch(setAppStatusAC({status:'failed'}))\r\n}\r\n","import {todolistsAPI, TodolistType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {handleServerNetworkError} from '../../utils/error-utils'\r\nimport {RequestStatusType, setAppStatusAC} from '../../app/app-reducer';\r\nimport {createSlice, PayloadAction} from '@reduxjs/toolkit';\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\n//slice\r\nconst slice = createSlice({\r\n    name: 'todolists',\r\n    initialState: initialState,\r\n    reducers: {\r\n        removeTodolistAC(state, action: PayloadAction<{id: string}>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            state.splice(index,1)\r\n        },\r\n        addTodolistAC(state, action: PayloadAction<{todolist: TodolistType}>) {\r\n            state.unshift({...action.payload.todolist, filter: 'all', entityStatus: 'idle'})\r\n        },\r\n        changeTodolistTitleAC(state, action: PayloadAction<{id: string, title: string}>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id);\r\n            state[index].title = action.payload.title\r\n        },\r\n        changeTodolistFilterAC(state, action: PayloadAction<{id: string, filter: FilterValuesType}>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id);\r\n            state[index].filter = action.payload.filter\r\n        },\r\n        changeTodolistEntityStatusAC(state, action: PayloadAction<{id: string, status: RequestStatusType}>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id);\r\n            state[index].entityStatus = action.payload.status\r\n        },\r\n        setTodolistsAC(state, action: PayloadAction<{todolists: Array<TodolistType>}>) {\r\n            return action.payload.todolists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n        }\r\n    }\r\n})\r\n\r\nexport const {\r\n    removeTodolistAC,\r\n    addTodolistAC,\r\n    changeTodolistTitleAC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistEntityStatusAC,\r\n    setTodolistsAC\r\n}\r\n= slice.actions\r\n\r\nexport const todolistsReducer = slice.reducer\r\n\r\n// thunks\r\nexport const fetchTodolistsTC = () => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        todolistsAPI.getTodolists()\r\n            .then((res) => {\r\n                dispatch(setTodolistsAC({todolists: res.data}))\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            })\r\n            .catch(error => {\r\n                handleServerNetworkError(error, dispatch);\r\n            })\r\n    }\r\n}\r\nexport const removeTodolistTC = (todolistId: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        dispatch(changeTodolistEntityStatusAC({id: todolistId, status:'loading'}))\r\n        todolistsAPI.deleteTodolist(todolistId)\r\n            .then((res) => {\r\n                dispatch(removeTodolistAC({id: todolistId}))\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            })\r\n    }\r\n}\r\nexport const addTodolistTC = (title: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        todolistsAPI.createTodolist(title)\r\n            .then((res) => {\r\n                dispatch(addTodolistAC({todolist: res.data.data.item}))\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            })\r\n    }\r\n}\r\nexport const changeTodolistTitleTC = (id: string, title: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        todolistsAPI.updateTodolist(id, title)\r\n            .then((res) => {\r\n                dispatch(changeTodolistTitleAC({id: id ,title}))\r\n            })\r\n    }\r\n}\r\n\r\n// types\r\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>;\r\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>;\r\nexport type SetTodolistsActionType = ReturnType<typeof setTodolistsAC>;\r\n\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\n","import {addTodolistAC, removeTodolistAC, setTodolistsAC} from './todolists-reducer'\r\nimport {TaskPriorities, TaskStatuses, TaskType, todolistsAPI, UpdateTaskModelType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {handleServerAppError, handleServerNetworkError} from '../../utils/error-utils'\r\nimport {setAppStatusAC} from '../../app/app-reducer';\r\nimport {createAsyncThunk, createSlice, PayloadAction} from '@reduxjs/toolkit';\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const fetchTasksTC = createAsyncThunk('tasks/fetchTasks', async (todolistId: string, thunkAPI)=>{\r\n    thunkAPI.dispatch(setAppStatusAC({status: 'loading'}))\r\n    const res = await todolistsAPI.getTasks(todolistId);\r\n    const tasks = res.data.items\r\n    thunkAPI.dispatch(setAppStatusAC({status: 'succeeded'}))\r\n    return {tasks, todolistId}\r\n\r\n})\r\n\r\nexport const removeTaskTC = createAsyncThunk('tasks/removeTask', (param:{taskId: string, todolistId: string}, thunkAPI)=>{\r\n    return todolistsAPI.deleteTask(param.todolistId, param.taskId)\r\n        .then(res => {\r\n            return {taskId: param.taskId, todolistId: param.todolistId}\r\n\r\n        })\r\n})\r\n\r\n//slice\r\n\r\nconst slice = createSlice({\r\n    name: 'tasks',\r\n    initialState: initialState,\r\n    reducers: {\r\n        addTaskAC(state, action: PayloadAction<{ task: TaskType }>) {\r\n            state[action.payload.task.todoListId].unshift(action.payload.task)\r\n        },\r\n        updateTaskAC(state, action: PayloadAction<{ taskId: string, model: UpdateDomainTaskModelType, todolistId: string }>) {\r\n            const tasks = state[action.payload.todolistId]\r\n            const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n            if (index > -1) {\r\n                tasks[index] = {...tasks[index], ...action.payload.model}\r\n            }\r\n        },\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder.addCase(addTodolistAC, (state, action) => {\r\n            state[action.payload.todolist.id] = []\r\n        });\r\n        builder.addCase(removeTodolistAC, (state, action) => {\r\n            delete state[action.payload.id]\r\n        });\r\n        builder.addCase(setTodolistsAC, (state, action) => {\r\n            action.payload.todolists.forEach((tl) => {\r\n                state[tl.id] = []\r\n            })\r\n        });\r\n        builder.addCase(fetchTasksTC.fulfilled, (state, action) => {\r\n            state[action.payload.todolistId] = action.payload.tasks\r\n            })\r\n        builder.addCase(removeTaskTC.fulfilled, (state, action) => {\r\n            const tasks = state[action.payload.todolistId]\r\n            const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n            if (index > -1) {\r\n                tasks.splice(index, 1)\r\n            }\r\n            })\r\n    }\r\n})\r\n\r\nexport const {addTaskAC, updateTaskAC} = slice.actions\r\n\r\nexport const tasksReducer = slice.reducer;\r\n\r\n// thunks\r\nexport const addTaskTC = (title: string, todolistId: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    todolistsAPI.createTask(todolistId, title)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                const task = res.data.data.item\r\n                const action = addTaskAC({task})\r\n                dispatch(action)\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch);\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const updateTaskTC = (taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string) =>\r\n    (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n        const state = getState()\r\n        const task = state.tasks[todolistId].find(t => t.id === taskId)\r\n        if (!task) {\r\n            //throw new Error(\"task not found in the state\");\r\n            console.warn('task not found in the state')\r\n            return\r\n        }\r\n\r\n        const apiModel: UpdateTaskModelType = {\r\n            deadline: task.deadline,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            title: task.title,\r\n            status: task.status,\r\n            ...domainModel\r\n        }\r\n\r\n        todolistsAPI.updateTask(todolistId, taskId, apiModel)\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    const action = updateTaskAC({taskId, model: domainModel, todolistId})\r\n                    dispatch(action)\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch);\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch);\r\n            })\r\n    }\r\n\r\n// types\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\n\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from '@material-ui/icons';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(function({addItem, disabled = false}: AddItemFormPropsType) {\r\n    console.log(\"AddItemForm called\")\r\n\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItemHandler = () => {\r\n        if (title.trim() !== \"\") {\r\n            addItem(title);\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItemHandler();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   disabled={disabled}\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItemHandler} disabled={disabled}>\r\n            <AddBox />\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport {TextField} from '@material-ui/core';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    console.log(\"EditableSpan called\");\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ?    <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode} />\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n});\r\n","import React, {ChangeEvent, useCallback} from 'react'\r\nimport {Checkbox, IconButton} from '@material-ui/core'\r\nimport {EditableSpan} from '../../../../components/EditableSpan/EditableSpan'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {TaskStatuses, TaskType} from '../../../../api/todolists-api'\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {AddItemForm} from '../../../components/AddItemForm/AddItemForm'\r\nimport {EditableSpan} from '../../../components/EditableSpan/EditableSpan'\r\nimport {Button, IconButton} from '@material-ui/core'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {Task} from './Task/Task'\r\nimport {TaskStatuses, TaskType} from '../../../api/todolists-api'\r\nimport {FilterValuesType, TodolistDomainType} from '../todolists-reducer'\r\nimport {useDispatch} from 'react-redux'\r\nimport {fetchTasksTC} from '../tasks-reducer'\r\n\r\ntype PropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    demo?: boolean\r\n}\r\n\r\nexport const Todolist = React.memo(function ({demo = false, ...props}: PropsType) {\r\n    console.log('Todolist called')\r\n\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        if (demo) {\r\n            return\r\n        }\r\n        const thunk = fetchTasksTC(props.todolist.id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.todolist.id)\r\n    }, [props.addTask, props.todolist.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.todolist.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.todolist.id, title)\r\n    }, [props.todolist.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.todolist.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.todolist.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.todolist.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist} disabled={props.todolist.entityStatus === 'loading'}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask} disabled={props.todolist.entityStatus === 'loading'}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.todolist.id}\r\n                                                removeTask={props.removeTask}\r\n                                                changeTaskTitle={props.changeTaskTitle}\r\n                                                changeTaskStatus={props.changeTaskStatus}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.todolist.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'default'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {\r\n    addTodolistTC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleTC,\r\n    fetchTodolistsTC,\r\n    FilterValuesType,\r\n    removeTodolistTC,\r\n    TodolistDomainType\r\n} from './todolists-reducer'\r\nimport {addTaskTC, removeTaskTC, TasksStateType, updateTaskTC} from './tasks-reducer'\r\nimport {TaskStatuses} from '../../api/todolists-api'\r\nimport {Grid, Paper} from '@material-ui/core'\r\nimport {AddItemForm} from '../../components/AddItemForm/AddItemForm'\r\nimport {Todolist} from './Todolist/Todolist'\r\nimport { Redirect } from 'react-router-dom'\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nexport const TodolistsList: React.FC<PropsType> = ({demo = false}) => {\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (demo || !isLoggedIn) {\r\n            return;\r\n        }\r\n        const thunk = fetchTodolistsTC()\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const removeTask = useCallback(function (taskId: string, todolistId: string) {\r\n        const thunk = removeTaskTC({taskId, todolistId})\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        const thunk = addTaskTC(title, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {status}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {title: newTitle}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        const action = changeTodolistFilterAC({id: todolistId, filter: value})\r\n        dispatch(action)\r\n    }, [])\r\n\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        const thunk = removeTodolistTC(id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        const thunk = changeTodolistTitleTC(id, title)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        const thunk = addTodolistTC(title)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    if (!isLoggedIn) {\r\n        return <Redirect to={\"/login\"} />\r\n    }\r\n\r\n    return <>\r\n        <Grid container style={{padding: '20px'}}>\r\n            <AddItemForm addItem={addTodolist}/>\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n            {\r\n                todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id]\r\n\r\n                    return <Grid item key={tl.id}>\r\n                        <Paper style={{padding: '10px'}}>\r\n                            <Todolist\r\n                                todolist={tl}\r\n                                tasks={allTodolistTasks}\r\n                                removeTask={removeTask}\r\n                                changeFilter={changeFilter}\r\n                                addTask={addTask}\r\n                                changeTaskStatus={changeStatus}\r\n                                removeTodolist={removeTodolist}\r\n                                changeTaskTitle={changeTaskTitle}\r\n                                changeTodolistTitle={changeTodolistTitle}\r\n                                demo={demo}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}\r\n","import React from 'react'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {setAppErrorAC} from '../../app/app-reducer'\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\nexport function ErrorSnackbar() {\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error);\r\n    const dispatch = useDispatch()\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n        dispatch(setAppErrorAC({error: null}));\r\n    }\r\n\r\n\r\n    const isOpen = error !== null;\r\n\r\n    return (\r\n        <Snackbar open={isOpen} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\">\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport {Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, TextField, Button, Grid} from '@material-ui/core'\r\nimport {useFormik} from 'formik'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {loginTC} from './auth-reducer'\r\nimport {AppDispatchType, AppRootStateType} from '../../app/store'\r\nimport { Redirect } from 'react-router-dom'\r\n\r\nexport const Login = () => {\r\n    const dispatch: AppDispatchType = useDispatch()\r\n\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn);\r\n\r\n    const formik = useFormik({\r\n        validate: (values) => {\r\n            if (!values.email) {\r\n                return {\r\n                    email: 'Email is required'\r\n                }\r\n            }\r\n            if (!values.password) {\r\n                return {\r\n                    password: 'Password is required'\r\n                }\r\n            }\r\n\r\n        },\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values));\r\n        },\r\n    })\r\n\r\n    if (isLoggedIn) {\r\n        return <Redirect to={\"/\"} />\r\n    }\r\n\r\n\r\n    return <Grid container justify=\"center\">\r\n        <Grid item xs={4}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>\r\n                            To log in get registered <a href={'https://social-network.samuraijs.com/'}\r\n                                                        target={'_blank'}>here</a>\r\n                        </p>\r\n                        <p>\r\n                            or use common test account credentials:\r\n                        </p>\r\n                        <p> Email: free@samuraijs.com\r\n                        </p>\r\n                        <p>\r\n                            Password: free\r\n                        </p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            label=\"Email\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps(\"email\")}\r\n                        />\r\n                        {formik.errors.email ? <div>{formik.errors.email}</div> : null}\r\n                        <TextField\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps(\"password\")}\r\n                        />\r\n                        {formik.errors.password ? <div>{formik.errors.password}</div> : null}\r\n                        <FormControlLabel\r\n                            label={'Remember me'}\r\n                            control={<Checkbox\r\n                                {...formik.getFieldProps(\"rememberMe\")}\r\n                                checked={formik.values.rememberMe}\r\n                            />}\r\n                        />\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport './App.css'\r\nimport {\r\n    AppBar,\r\n    Button,\r\n    CircularProgress,\r\n    Container,\r\n    IconButton,\r\n    LinearProgress,\r\n    Toolbar,\r\n    Typography\r\n} from '@material-ui/core'\r\nimport {Menu} from '@material-ui/icons'\r\nimport {TodolistsList} from '../features/TodolistsList/TodolistsList'\r\nimport {ErrorSnackbar} from '../components/ErrorSnackbar/ErrorSnackbar'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from './store'\r\nimport {initializeAppTC, RequestStatusType} from './app-reducer'\r\nimport {BrowserRouter, Route} from 'react-router-dom'\r\nimport {Login} from '../features/Login/Login'\r\nimport {logoutTC} from '../features/Login/auth-reducer'\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nfunction App({demo = false}: PropsType) {\r\n    const status = useSelector<AppRootStateType, RequestStatusType>((state) => state.app.status)\r\n    const isInitialized = useSelector<AppRootStateType, boolean>((state) => state.app.isInitialized)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(initializeAppTC())\r\n    }, [])\r\n\r\n    const logoutHandler = useCallback(() => {\r\n        dispatch(logoutTC())\r\n    }, [])\r\n\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n\r\n    return (\r\n        <BrowserRouter>\r\n            <div className=\"App\">\r\n                <ErrorSnackbar/>\r\n                <AppBar position=\"static\">\r\n                    <Toolbar>\r\n                        <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                            <Menu/>\r\n                        </IconButton>\r\n                        <Typography variant=\"h6\">\r\n                            News\r\n                        </Typography>\r\n                        {isLoggedIn && <Button color=\"inherit\" onClick={logoutHandler}>Log out</Button>}\r\n                    </Toolbar>\r\n                    {status === 'loading' && <LinearProgress/>}\r\n                </AppBar>\r\n                <Container fixed>\r\n                    <Route exact path={'/'} render={() => <TodolistsList demo={demo}/>}/>\r\n                    <Route path={'/login'} render={() => <Login/>}/>\r\n                </Container>\r\n            </div>\r\n        </BrowserRouter>\r\n    )\r\n}\r\n\r\nexport default App\r\n","import {tasksReducer} from '../features/TodolistsList/tasks-reducer';\r\nimport {todolistsReducer} from '../features/TodolistsList/todolists-reducer';\r\nimport {combineReducers} from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport {appReducer} from './app-reducer'\r\nimport {authReducer} from '../features/Login/auth-reducer'\r\nimport {configureStore} from '@reduxjs/toolkit';\r\n\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer,\r\n    auth: authReducer\r\n})\r\n\r\nexport const store = configureStore({\r\n    reducer: rootReducer,\r\n    middleware: (getDefaultMiddleware) =>\r\n        getDefaultMiddleware()\r\n            .prepend(thunkMiddleware)\r\n});\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\nexport type AppDispatchType = typeof store.dispatch\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport App from './app/App';\r\nimport {store} from './app/store';\r\nimport {Provider} from 'react-redux';\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App/>\r\n    </Provider>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}