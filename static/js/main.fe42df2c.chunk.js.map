{"version":3,"sources":["serviceWorker.ts","api/todolists-api.ts","features/Login/auth-reducer.ts","app/app-reducer.ts","utils/error-utils.ts","features/TodolistsList/todolists-reducer.ts","features/TodolistsList/tasks-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/Login/selectors.tsx","features/TodolistsList/selectors.tsx","features/TodolistsList/TodolistsList.tsx","app/selectors.ts","components/ErrorSnackbar/ErrorSnackbar.tsx","features/Login/Login.tsx","app/App.tsx","app/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","id","delete","put","todolistId","taskId","taskTitile","model","authAPI","data","loginTC","createAsyncThunk","thunkAPI","a","dispatch","setAppStatusAC","status","res","resultCode","handleServerAppError","rejectWithValue","value","handleServerNetworkError","message","logoutTC","_","slice","createSlice","name","initialState","isLoggedIn","reducers","setIsLoggedInAC","state","action","payload","extraReducers","builder","addCase","fulfilled","authReducer","reducer","actions","initializeAppTC","error","isInitialized","setAppErrorAC","appReducer","messages","length","fetchTodolistsTC","todolists","removeTodolistTC","changeTodolistEntityStatusAC","addTodolistTC","todolist","item","changeTodolistTitleTC","params","changeTodolistFilterAC","index","findIndex","tl","filter","entityStatus","map","splice","unshift","todolistsReducer","fetchTasksTC","tasks","items","removeTaskTC","param","then","addTaskTC","task","updateTaskTC","getState","find","t","console","warn","apiModel","deadline","description","priority","startDate","domainModel","tasksReducer","forEach","todoListId","AddItemForm","React","memo","addItem","disabled","log","useState","setTitle","setError","addItemHandler","trim","TextField","variant","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","props","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","onClickHandler","useCallback","removeTask","onChangeHandler","newIsDoneValue","checked","changeTaskStatus","Completed","New","onTitleChangeHandler","newValue","changeTaskTitle","key","className","Checkbox","Delete","Todolist","demo","useDispatch","useEffect","thunk","addTask","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","removeTodolist","style","paddingTop","Button","selectIsLoggedIn","auth","selectTodolists","selectTasks","TodolistsList","useSelector","authSelectors","changeStatus","newTitle","addTodolist","Grid","container","padding","spacing","allTodolistTasks","Paper","to","selectStatus","app","selectIsInitialized","selectAppError","Alert","elevation","ErrorSnackbar","appSelectors","handleClose","event","reason","isOpen","Snackbar","open","autoHideDuration","onClose","severity","Login","formik","useFormik","validate","values","email","password","initialValues","rememberMe","onSubmit","justify","xs","handleSubmit","FormControl","FormLabel","href","target","FormGroup","margin","getFieldProps","errors","type","FormControlLabel","control","App","logoutHandler","AppBar","position","Toolbar","edge","aria-label","Typography","LinearProgress","Container","fixed","exact","path","render","top","textAlign","width","CircularProgress","rootReducer","combineReducers","store","configureStore","middleware","getDefaultMiddleware","prepend","thunkMiddleware","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.fe42df2c.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios from 'axios'\r\n\r\nconst settings = {\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'ace90cee-0ad1-4fe7-b431-a630cfb3f541'\r\n    }\r\n}\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    ...settings\r\n})\r\n\r\n// api\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        const promise = instance.get<TodolistType[]>('todo-lists');\r\n        return promise;\r\n    },\r\n    createTodolist(title: string) {\r\n        const promise = instance.post<ResponseType<{ item: TodolistType }>>('todo-lists', {title: title});\r\n        return promise;\r\n    },\r\n    deleteTodolist(id: string) {\r\n        const promise = instance.delete<ResponseType>(`todo-lists/${id}`);\r\n        return promise;\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        const promise = instance.put<ResponseType>(`todo-lists/${id}`, {title: title});\r\n        return promise;\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, taskTitile: string) {\r\n        return instance.post<ResponseType<{ item: TaskType}>>(`todo-lists/${todolistId}/tasks`, {title: taskTitile});\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<ResponseType<TaskType>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n}\r\n\r\n\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha?: string\r\n}\r\n\r\nexport const authAPI = {\r\n    login(data: LoginParamsType) {\r\n        const promise = instance.post<ResponseType<{userId?: number}>>('auth/login', data);\r\n        return promise;\r\n    },\r\n    logout() {\r\n        const promise = instance.delete<ResponseType<{userId?: number}>>('auth/login');\r\n        return promise;\r\n    },\r\n    me() {\r\n       const promise =  instance.get<ResponseType<{id: number; email: string; login: string}>>('auth/me');\r\n       return promise\r\n    }\r\n}\r\n\r\n// types\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: D\r\n}\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n","import {Dispatch} from 'redux'\r\nimport {setAppStatusAC} from '../../app/app-reducer'\r\nimport {authAPI, LoginParamsType} from '../../api/todolists-api'\r\nimport {handleServerAppError, handleServerNetworkError} from '../../utils/error-utils'\r\nimport {createAsyncThunk, createSlice, PayloadAction} from '@reduxjs/toolkit';\r\nimport {action} from '@storybook/addon-actions';\r\n\r\ntype PayloadType = {\r\n    value: boolean\r\n}\r\n\r\nconst initialState = {\r\n    isLoggedIn: false\r\n}\r\n\r\nexport const loginTC = createAsyncThunk('auth/loginTC', async (data: LoginParamsType, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatusAC({status: 'loading'}))\r\n    try {\r\n        const res = await authAPI.login(data);\r\n        if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            return\r\n        } else {\r\n            handleServerAppError(res.data, thunkAPI.dispatch)\r\n            return thunkAPI.rejectWithValue({value: false})\r\n        }\r\n    } catch (error: any) {\r\n        handleServerNetworkError({message: error}, thunkAPI.dispatch)\r\n        return thunkAPI.rejectWithValue({value: false})\r\n    }\r\n\r\n})\r\n\r\nexport const logoutTC = createAsyncThunk('auth/logout', async (_, {dispatch, rejectWithValue}) => {\r\n    try {\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        const res = await authAPI.logout()\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            return\r\n        } else {\r\n            handleServerAppError(res.data, dispatch)\r\n            return rejectWithValue({})\r\n        }\r\n    } catch (error: any) {\r\n        handleServerNetworkError({message: error}, dispatch)\r\n        return rejectWithValue({})\r\n    }\r\n})\r\n\r\n\r\nconst slice = createSlice({\r\n    name: 'auth',\r\n    initialState: initialState,\r\n    reducers: {\r\n        setIsLoggedInAC(state, action: PayloadAction<Pick<PayloadType, 'value'>>) {\r\n            state.isLoggedIn = action.payload.value;\r\n        },\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder.addCase(loginTC.fulfilled, (state) => {\r\n            state.isLoggedIn = true;\r\n        })\r\n        builder.addCase(logoutTC.fulfilled, (state) => {\r\n            state.isLoggedIn = false;\r\n        })\r\n    }\r\n})\r\n\r\nexport const authReducer = slice.reducer\r\nexport const {setIsLoggedInAC} = slice.actions\r\n\r\n\r\n// thunks\r\n\r\n\r\n\r\n","import {authAPI} from '../api/todolists-api'\r\nimport {setIsLoggedInAC} from '../features/Login/auth-reducer'\r\nimport {createAsyncThunk, createSlice, PayloadAction} from '@reduxjs/toolkit';\r\n\r\n\r\n//types\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\nexport type InitialStateType = {\r\n    // взаимодействие с сервером\r\n    status: RequestStatusType\r\n    // ошибка  - мы запишем текст ошибки\r\n    error: string | null\r\n    isInitialized: boolean\r\n}\r\n\r\ntype PayloadType = {\r\n    error: string | null\r\n    value: boolean\r\n    status: RequestStatusType\r\n}\r\n\r\nconst initialState: InitialStateType = {\r\n    status: 'idle',\r\n    error: null,\r\n    isInitialized: false\r\n}\r\n\r\nexport const initializeAppTC = createAsyncThunk('app/initialize', async (_, {dispatch, rejectWithValue}) => {\r\n    try {\r\n        const res = await authAPI.me()\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setIsLoggedInAC({value: true}));\r\n        } else {\r\n\r\n        }\r\n    } catch (e) {\r\n\r\n    }\r\n})\r\n\r\n\r\n// slice\r\nconst slice = createSlice({\r\n    name: 'app',\r\n    initialState: initialState,\r\n    reducers: {\r\n        setAppErrorAC(state, action: PayloadAction<Pick<PayloadType, 'error'>>) {\r\n            state.error = action.payload.error\r\n        },\r\n        setAppStatusAC(state, action: PayloadAction<Pick<PayloadType, 'status'>>) {\r\n            state.status = action.payload.status\r\n        },\r\n    },\r\n    extraReducers: builder => {\r\n        builder.addCase(initializeAppTC.fulfilled, (state) => {\r\n            state.isInitialized = true\r\n        })\r\n    }\r\n})\r\n\r\nexport const {setAppErrorAC, setAppStatusAC} = slice.actions\r\nexport const appReducer = slice.reducer\r\n\r\n\r\n\r\n","import {ResponseType} from '../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {setAppErrorAC, setAppStatusAC} from '../app/app-reducer';\r\n\r\nexport const handleServerAppError = <D>(data: ResponseType<D>, dispatch: Dispatch) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC({error: data.messages[0]}))\r\n    } else {\r\n        dispatch(setAppErrorAC({error: 'Some error occurred'}))\r\n    }\r\n    dispatch(setAppStatusAC({status: 'failed'}))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: { message: string }, dispatch: Dispatch) => {\r\n    dispatch(setAppErrorAC({error: error.message ? error.message : 'Some error occurred'}))\r\n    dispatch(setAppStatusAC({status:'failed'}))\r\n}\r\n","import {todolistsAPI, TodolistType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {handleServerNetworkError} from '../../utils/error-utils'\r\nimport {RequestStatusType, setAppStatusAC} from '../../app/app-reducer';\r\nimport {createAsyncThunk, createSlice, PayloadAction} from '@reduxjs/toolkit';\r\nimport {action} from '@storybook/addon-actions';\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nexport const fetchTodolistsTC = createAsyncThunk('todolist/fetchTodolist', async (_, {\r\n    dispatch,\r\n    rejectWithValue\r\n}) => {\r\n    try {\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        const res = await todolistsAPI.getTodolists()\r\n        dispatch(setAppStatusAC({status: 'succeeded'}))\r\n        return {todolists: res.data}\r\n    } catch (e: any) {\r\n        handleServerNetworkError(e, dispatch);\r\n        return rejectWithValue(null)\r\n    }\r\n})\r\n\r\n\r\nexport const removeTodolistTC = createAsyncThunk('todolist/removeTodolist', async (todolistId: string, {\r\n    dispatch,\r\n    rejectWithValue\r\n}) => {\r\n    try {\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        dispatch(changeTodolistEntityStatusAC({id: todolistId, status: 'loading'}))\r\n        const res = await todolistsAPI.deleteTodolist(todolistId)\r\n        dispatch(setAppStatusAC({status: 'succeeded'}))\r\n        return {id: todolistId}\r\n    } catch (e) {\r\n        return rejectWithValue(null)\r\n    }\r\n\r\n\r\n})\r\n\r\nexport const addTodolistTC = createAsyncThunk('todolist/addTodoList', async (title: string, {\r\n    dispatch,\r\n    rejectWithValue\r\n}) => {\r\n    try {\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        const res = await todolistsAPI.createTodolist(title)\r\n        dispatch(setAppStatusAC({status: 'succeeded'}))\r\n        return {todolist: res.data.data.item}\r\n    } catch (e) {\r\n        return rejectWithValue(null)\r\n    }\r\n\r\n})\r\n\r\nexport const changeTodolistTitleTC = createAsyncThunk('todolist/changeTodolistTitle', async (params: { id: string, title: string }, {\r\n    dispatch,\r\n    rejectWithValue\r\n}) => {\r\n    try {\r\n        await todolistsAPI.updateTodolist(params.id, params.title)\r\n        return {id: params.id, title: params.title}\r\n    } catch (e) {\r\n        return rejectWithValue(null)\r\n    }\r\n\r\n})\r\n\r\n\r\n//slice\r\nconst slice = createSlice({\r\n    name: 'todolists',\r\n    initialState: initialState,\r\n    reducers: {\r\n        changeTodolistFilterAC(state, action: PayloadAction<{ id: string, filter: FilterValuesType }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id);\r\n            state[index].filter = action.payload.filter\r\n        },\r\n        changeTodolistEntityStatusAC(state, action: PayloadAction<{ id: string, status: RequestStatusType }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id);\r\n            state[index].entityStatus = action.payload.status\r\n        },\r\n    },\r\n    extraReducers: builder => {\r\n        builder.addCase(fetchTodolistsTC.fulfilled, (state, action) => {\r\n            action.payload.todolists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n        })\r\n        builder.addCase(removeTodolistTC.fulfilled, (state, action) => {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            state.splice(index, 1)\r\n        })\r\n        builder.addCase(addTodolistTC.fulfilled, (state, action) => {\r\n            state.unshift({...action.payload.todolist, filter: 'all', entityStatus: 'idle'})\r\n        })\r\n        builder.addCase(changeTodolistTitleTC.fulfilled, (state, action) => {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id);\r\n            state[index].title = action.payload.title\r\n        })\r\n    }\r\n})\r\n\r\nexport const {\r\n    changeTodolistFilterAC,\r\n    changeTodolistEntityStatusAC,\r\n}\r\n    = slice.actions\r\n\r\nexport const todolistsReducer = slice.reducer\r\n\r\n// thunks\r\n\r\n\r\n// types\r\n\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\n","import {addTodolistTC, fetchTodolistsTC, removeTodolistTC} from './todolists-reducer'\r\nimport {TaskPriorities, TaskStatuses, TaskType, todolistsAPI, UpdateTaskModelType} from '../../api/todolists-api'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {handleServerAppError, handleServerNetworkError} from '../../utils/error-utils'\r\nimport {setAppStatusAC} from '../../app/app-reducer';\r\nimport {createAsyncThunk, createSlice} from '@reduxjs/toolkit';\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const fetchTasksTC = createAsyncThunk('tasks/fetchTasks', async (todolistId: string, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatusAC({status: 'loading'}))\r\n    const res = await todolistsAPI.getTasks(todolistId);\r\n    const tasks = res.data.items\r\n    thunkAPI.dispatch(setAppStatusAC({status: 'succeeded'}))\r\n    return {tasks, todolistId}\r\n\r\n})\r\n\r\nexport const removeTaskTC = createAsyncThunk('tasks/removeTask', (param: { taskId: string, todolistId: string }, thunkAPI) => {\r\n    return todolistsAPI.deleteTask(param.todolistId, param.taskId)\r\n        .then(res => {\r\n            return {taskId: param.taskId, todolistId: param.todolistId}\r\n\r\n        })\r\n})\r\n\r\n\r\nexport const addTaskTC = createAsyncThunk('tasks/addTask', async (param: { title: string, todolistId: string }, {\r\n    dispatch,\r\n    rejectWithValue\r\n}) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    const res = await todolistsAPI.createTask(param.todolistId, param.title)\r\n    try {\r\n        if (res.data.resultCode === 0) {\r\n            const task = res.data.data.item\r\n            dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            return task\r\n        } else {\r\n            handleServerAppError(res.data, dispatch);\r\n            return rejectWithValue(null)\r\n        }\r\n    } catch (error: any) {\r\n        handleServerNetworkError(error, dispatch)\r\n        return rejectWithValue(null)\r\n    }\r\n})\r\n\r\nexport const updateTaskTC = createAsyncThunk('tasks/updateTask', async (param: { taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string}, {\r\n    dispatch,\r\n    rejectWithValue,\r\n    getState\r\n}) => {\r\n    const state = getState() as AppRootStateType\r\n    const task = state.tasks[param.todolistId].find(t => t.id === param.taskId)\r\n    if (!task) {\r\n        console.warn('task not found in the state')\r\n        return rejectWithValue(null)\r\n    }\r\n\r\n    const apiModel: UpdateTaskModelType = {\r\n        deadline: task.deadline,\r\n        description: task.description,\r\n        priority: task.priority,\r\n        startDate: task.startDate,\r\n        title: task.title,\r\n        status: task.status,\r\n        ...param.domainModel\r\n    }\r\n\r\n    const res = await todolistsAPI.updateTask(param.todolistId, param.taskId, apiModel)\r\n    try {\r\n        if (res.data.resultCode === 0) {\r\n            return {taskId: param.taskId, model: param.domainModel, todolistId: param.todolistId}\r\n        } else {\r\n            handleServerAppError(res.data, dispatch);\r\n            return rejectWithValue(null)\r\n        }\r\n    }\r\n        catch(error: any) {\r\n            handleServerNetworkError(error, dispatch);\r\n            return rejectWithValue(null)\r\n    }\r\n})\r\n\r\n\r\n//slice\r\n\r\nconst slice = createSlice({\r\n    name: 'tasks',\r\n    initialState: initialState,\r\n    reducers: {\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder.addCase(removeTodolistTC.fulfilled, (state, action) => {\r\n            delete state[action.payload.id]\r\n        });\r\n        builder.addCase(fetchTodolistsTC.fulfilled, (state, action) => {\r\n            action.payload.todolists.forEach((tl) => {\r\n                state[tl.id] = []\r\n            })\r\n        });\r\n        builder.addCase(fetchTasksTC.fulfilled, (state, action) => {\r\n            state[action.payload.todolistId] = action.payload.tasks\r\n        })\r\n        builder.addCase(removeTaskTC.fulfilled, (state, action) => {\r\n            const tasks = state[action.payload.todolistId]\r\n            const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n            if (index > -1) {\r\n                tasks.splice(index, 1)\r\n            }\r\n        })\r\n        builder.addCase(addTaskTC.fulfilled, (state, action) => {\r\n            state[action.payload.todoListId].unshift(action.payload)\r\n        })\r\n        builder.addCase(updateTaskTC.fulfilled, (state, action) => {\r\n            const tasks = state[action.payload.todolistId]\r\n            const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n            if (index > -1) {\r\n                tasks[index] = {...tasks[index], ...action.payload.model}\r\n            }\r\n        });\r\n        builder.addCase(addTodolistTC.fulfilled, (state, action) => {\r\n            state[action.payload.todolist.id] = []\r\n        });\r\n    }\r\n})\r\n\r\nexport const tasksReducer = slice.reducer;\r\n\r\n// thunks\r\n\r\n\r\n// types\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\n\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from '@material-ui/icons';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(function({addItem, disabled = false}: AddItemFormPropsType) {\r\n    console.log(\"AddItemForm called\")\r\n\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItemHandler = () => {\r\n        if (title.trim() !== \"\") {\r\n            addItem(title);\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItemHandler();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   disabled={disabled}\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItemHandler} disabled={disabled}>\r\n            <AddBox />\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport {TextField} from '@material-ui/core';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    console.log(\"EditableSpan called\");\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ?    <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode} />\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n});\r\n","import React, {ChangeEvent, useCallback} from 'react'\r\nimport {Checkbox, IconButton} from '@material-ui/core'\r\nimport {EditableSpan} from '../../../../components/EditableSpan/EditableSpan'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {TaskStatuses, TaskType} from '../../../../api/todolists-api'\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {AddItemForm} from '../../../components/AddItemForm/AddItemForm'\r\nimport {EditableSpan} from '../../../components/EditableSpan/EditableSpan'\r\nimport {Button, IconButton} from '@material-ui/core'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {Task} from './Task/Task'\r\nimport {TaskStatuses, TaskType} from '../../../api/todolists-api'\r\nimport {FilterValuesType, TodolistDomainType} from '../todolists-reducer'\r\nimport {useDispatch} from 'react-redux'\r\nimport {fetchTasksTC} from '../tasks-reducer'\r\n\r\ntype PropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    demo?: boolean\r\n}\r\n\r\nexport const Todolist = React.memo(function ({demo = false, ...props}: PropsType) {\r\n    console.log('Todolist called')\r\n\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        if (demo) {\r\n            return\r\n        }\r\n        const thunk = fetchTasksTC(props.todolist.id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.todolist.id)\r\n    }, [props.addTask, props.todolist.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.todolist.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.todolist.id, title)\r\n    }, [props.todolist.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.todolist.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.todolist.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.todolist.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist} disabled={props.todolist.entityStatus === 'loading'}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask} disabled={props.todolist.entityStatus === 'loading'}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.todolist.id}\r\n                                                removeTask={props.removeTask}\r\n                                                changeTaskTitle={props.changeTaskTitle}\r\n                                                changeTaskStatus={props.changeTaskStatus}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.todolist.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'default'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import {AppRootStateType} from '../../app/store';\r\n\r\nexport const selectIsLoggedIn = (state: AppRootStateType) => state.auth.isLoggedIn","import {AppRootStateType} from '../../app/store';\r\n\r\nexport const selectTodolists = (state: AppRootStateType) => state.todolists\r\nexport const selectTasks = (state: AppRootStateType) => state.tasks\r\n\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {\r\n    addTodolistTC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleTC,\r\n    fetchTodolistsTC,\r\n    FilterValuesType,\r\n    removeTodolistTC\r\n} from './todolists-reducer'\r\nimport {addTaskTC, removeTaskTC, updateTaskTC} from './tasks-reducer'\r\nimport {TaskStatuses} from '../../api/todolists-api'\r\nimport {Grid, Paper} from '@material-ui/core'\r\nimport {AddItemForm} from '../../components/AddItemForm/AddItemForm'\r\nimport {Todolist} from './Todolist/Todolist'\r\nimport {Redirect} from 'react-router-dom'\r\nimport {authSelectors} from '../Login';\r\nimport {selectTasks, selectTodolists} from './selectors';\r\nimport {useActions} from '../../app/store';\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nexport const TodolistsList: React.FC<PropsType> = ({demo = false}) => {\r\n    const todolists = useSelector(selectTodolists)\r\n    const tasks = useSelector(selectTasks)\r\n    const isLoggedIn = useSelector(authSelectors.selectIsLoggedIn)\r\n    // useActions()\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (demo || !isLoggedIn) {\r\n            return;\r\n        }\r\n        const thunk = fetchTodolistsTC()\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const removeTask = useCallback(function (taskId: string, todolistId: string) {\r\n        const thunk = removeTaskTC({taskId, todolistId})\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        const thunk = addTaskTC({title, todolistId})\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\r\n        const thunk = updateTaskTC({taskId: id, domainModel: {status}, todolistId})\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n        const thunk = updateTaskTC({taskId: id, domainModel: {title: newTitle}, todolistId})\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        const action = changeTodolistFilterAC({id: todolistId, filter: value})\r\n        dispatch(action)\r\n    }, [])\r\n\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        const thunk = removeTodolistTC(id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        const thunk = changeTodolistTitleTC({id, title})\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        const thunk = addTodolistTC(title)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    if (!isLoggedIn) {\r\n        return <Redirect to={\"/login\"} />\r\n    }\r\n\r\n    return <>\r\n        <Grid container style={{padding: '20px'}}>\r\n            <AddItemForm addItem={addTodolist}/>\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n            {\r\n                todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id]\r\n\r\n                    return <Grid item key={tl.id}>\r\n                        <Paper style={{padding: '10px'}}>\r\n                            <Todolist\r\n                                todolist={tl}\r\n                                tasks={allTodolistTasks}\r\n                                removeTask={removeTask}\r\n                                changeFilter={changeFilter}\r\n                                addTask={addTask}\r\n                                changeTaskStatus={changeStatus}\r\n                                removeTodolist={removeTodolist}\r\n                                changeTaskTitle={changeTaskTitle}\r\n                                changeTodolistTitle={changeTodolistTitle}\r\n                                demo={demo}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}\r\n","import {AppRootStateType} from './store';\r\n\r\nexport const selectStatus = (state: AppRootStateType) => state.app.status\r\nexport const selectIsInitialized = (state: AppRootStateType) => state.app.isInitialized\r\nexport const selectAppError = (state: AppRootStateType) => state.app.error","import React from 'react'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {setAppErrorAC} from '../../app/app-reducer'\r\nimport {appSelectors} from '../../app';\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\nexport function ErrorSnackbar() {\r\n    const error = useSelector(appSelectors.selectAppError);\r\n    const dispatch = useDispatch()\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n        dispatch(setAppErrorAC({error: null}));\r\n    }\r\n\r\n\r\n    const isOpen = error !== null;\r\n\r\n    return (\r\n        <Snackbar open={isOpen} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\">\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport {Button, Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, Grid, TextField} from '@material-ui/core'\r\nimport {useFormik} from 'formik'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {loginTC} from './auth-reducer'\r\nimport {AppDispatchType} from '../../app/store'\r\nimport {Redirect} from 'react-router-dom'\r\nimport {selectIsLoggedIn} from './selectors';\r\n\r\nexport const Login = () => {\r\n    const dispatch: AppDispatchType = useDispatch()\r\n\r\n    const isLoggedIn = useSelector(selectIsLoggedIn);\r\n\r\n    const formik = useFormik({\r\n        validate: (values) => {\r\n            if (!values.email) {\r\n                return {\r\n                    email: 'Email is required'\r\n                }\r\n            }\r\n            if (!values.password) {\r\n                return {\r\n                    password: 'Password is required'\r\n                }\r\n            }\r\n\r\n        },\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values));\r\n        },\r\n    })\r\n\r\n    if (isLoggedIn) {\r\n        return <Redirect to={\"/\"} />\r\n    }\r\n\r\n\r\n    return <Grid container justify=\"center\">\r\n        <Grid item xs={4}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>\r\n                            To log in get registered <a href={'https://social-network.samuraijs.com/'}\r\n                                                        target={'_blank'}>here</a>\r\n                        </p>\r\n                        <p>\r\n                            or use common test account credentials:\r\n                        </p>\r\n                        <p> Email: free@samuraijs.com\r\n                        </p>\r\n                        <p>\r\n                            Password: free\r\n                        </p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            label=\"Email\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps(\"email\")}\r\n                        />\r\n                        {formik.errors.email ? <div>{formik.errors.email}</div> : null}\r\n                        <TextField\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps(\"password\")}\r\n                        />\r\n                        {formik.errors.password ? <div>{formik.errors.password}</div> : null}\r\n                        <FormControlLabel\r\n                            label={'Remember me'}\r\n                            control={<Checkbox\r\n                                {...formik.getFieldProps(\"rememberMe\")}\r\n                                checked={formik.values.rememberMe}\r\n                            />}\r\n                        />\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport './App.css'\r\nimport {\r\n    AppBar,\r\n    Button,\r\n    CircularProgress,\r\n    Container,\r\n    IconButton,\r\n    LinearProgress,\r\n    Toolbar,\r\n    Typography\r\n} from '@material-ui/core'\r\nimport {TodolistsList} from '../features/TodolistsList/TodolistsList'\r\nimport {ErrorSnackbar} from '../components/ErrorSnackbar/ErrorSnackbar'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {initializeAppTC} from './app-reducer'\r\nimport {BrowserRouter, HashRouter, Route} from 'react-router-dom'\r\nimport {Login} from '../features/Login/Login'\r\nimport {logoutTC} from '../features/Login/auth-reducer'\r\nimport {selectIsInitialized, selectStatus} from './selectors';\r\nimport {authSelectors} from '../features/Login';\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\n\r\n\r\nfunction App({demo = false}: PropsType) {\r\n    const status = useSelector(selectStatus)\r\n    const isInitialized = useSelector(selectIsInitialized)\r\n    const isLoggedIn = useSelector(authSelectors.selectIsLoggedIn)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(initializeAppTC())\r\n    }, [])\r\n\r\n    const logoutHandler = useCallback(() => {\r\n        dispatch(logoutTC())\r\n    }, [])\r\n\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n\r\n    return (\r\n        <HashRouter>\r\n        {/*<BrowserRouter basename={'Todolist_Project'}>*/}\r\n            <div className=\"App\">\r\n                <ErrorSnackbar/>\r\n                <AppBar position=\"static\">\r\n                    <Toolbar>\r\n                        <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n\r\n                        </IconButton>\r\n                        <Typography variant=\"h6\">\r\n                            TODO\r\n                        </Typography>\r\n                        {isLoggedIn && <Button color=\"inherit\" onClick={logoutHandler}>Log out</Button>}\r\n                    </Toolbar>\r\n                    {status === 'loading' && <LinearProgress/>}\r\n                </AppBar>\r\n                <Container fixed>\r\n                    <Route exact path={'/'} render={() => <TodolistsList demo={demo}/>}/>\r\n                    <Route path={'/login'} render={() => <Login/>}/>\r\n                </Container>\r\n            </div>\r\n        </HashRouter>\r\n    )\r\n    {/*</BrowserRouter>*/}\r\n\r\n}\r\n\r\nexport default App\r\n","import {tasksReducer} from '../features/TodolistsList/tasks-reducer';\r\nimport {todolistsReducer} from '../features/TodolistsList/todolists-reducer';\r\nimport {ActionCreatorsMapObject, bindActionCreators, combineReducers} from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport {appReducer} from './app-reducer'\r\nimport {authReducer} from '../features/Login/auth-reducer'\r\nimport {configureStore} from '@reduxjs/toolkit';\r\nimport {useDispatch} from 'react-redux';\r\nimport {useMemo} from 'react';\r\n\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer,\r\n    auth: authReducer\r\n})\r\n\r\nexport const store = configureStore({\r\n    reducer: rootReducer,\r\n    middleware: (getDefaultMiddleware) =>\r\n        getDefaultMiddleware()\r\n            .prepend(thunkMiddleware)\r\n});\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\nexport type AppDispatchType = typeof store.dispatch\r\n\r\nexport function useActions<T extends ActionCreatorsMapObject >(actions: T) {\r\n    const dispatch = useDispatch()\r\n\r\n    const boundActions = useMemo(()=> {\r\n        return bindActionCreators(actions, dispatch)\r\n    }, [])\r\n}\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport App from './app/App';\r\nimport {store} from './app/store';\r\nimport {Provider} from 'react-redux';\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App/>\r\n    </Provider>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}